swagger: '2.0'
info:
  version: '1.0'
  title: 'HotS API'

# Config for hotsapi.net
host: hotsapi.net
basePath: /api/v1
schemes:
- http
- https

paths:
  /replays:
    get:
      summary: List all replays
      description: Returns up to 1000 replays sorted by id. For paging and incremental updates use `min_id` parameter.
      operationId: listReplays
      tags:
        - replays
      produces:
        - application/json
      parameters:
        - name: min_id
          in: query
          description: Minimum replay id
          required: false
          type: integer
          example: 1337
        - name: existing
          in: query
          required: false
          type: boolean
          description: Whether to include only replays that still have corresponding files on hotsapi S3 storage
        - name: with_players
          in: query
          required: false
          type: boolean
          description: Whether to include player and ban data in response. When used reduces max returned objects to 100.
      responses:
        '200':
          description: An array with replays
          schema:
            type: array
            items:
              $ref: '#/definitions/Replay'
    post:
      summary: Create one or more Replay as File Uploads.
      operationId: createReplay
      tags:
        - replays
      parameters:
        - name: file
          in: formData
          description: The uploaded replay file.
          type: file
      consumes:
        - 'multipart/form-data'
      responses:
        '200':
          description: Return an upload response
          schema:
            $ref: '#/definitions/UploadResponse'
  /replays/parsed:
    get:
      summary: List all parsed replays
      description: >-
        Returns up to 1000 replays sorted by parsed id. Parsed id unique and is incrementally assigned
        as replays are parsed. For paging and incremental updates use `min_parsed_id` parameter.
      operationId: listReplays
      tags:
        - replays
      produces:
        - application/json
      parameters:
        - name: min_parsed_id
          in: query
          description: Minimum parsed id
          required: false
          type: integer
          example: 1337
        - name: with_players
          in: query
          required: false
          type: boolean
          description: Whether to include player and ban data in response. When used reduces max returned objects to 100.
      responses:
        '200':
          description: An array with Replays
          schema:
            type: array
            items:
              $ref: '#/definitions/Replay'
  '/replays/{id}':
    get:
      summary: Requests a specific replay
      operationId: getReplayById
      tags:
        - replays
      produces:
        - application/json
      responses:
        '200':
          description: An array with Replays
          schema:
            $ref: '#/definitions/Replay'
    parameters:
      - name: id
        in: path
        description: The Id of the Replay
        required: true
        type: integer
        example: 1337
  /upload:
    post:
      deprecated: true
      summary: Create one or more Replay as File Uploads.
      description: 'This method is deprecated because the method style does not follow a
        Ressource based approach. Please use the POST method of the Resource
        __Replays__ instead.'
      operationId: uploadReplay
      tags:
        - replays
      consumes:
        - 'multipart/form-data'
      responses:
        '200':
          description: Return an upload response
          schema:
            $ref: '#/definitions/UploadResponse'
  /heroes:
    get:
      summary: Get list of all heroes
      tags:
        - heroes
      responses:
        '200':
          description: An array of heroes
          schema:
            type: array
            items:
              $ref: '#/definitions/Hero'
  /heroes/{hero}:
    get:
      summary: Get hero details
      tags:
        - heroes
      responses:
        '200':
          description: Hero object
          schema:
            $ref: '#/definitions/Hero'
    parameters:
      - name: hero
        in: path
        description: Hero name, or short name, or id
        required: true
        type: string
        example: abathur
  /heroes/{hero}/abilities/{ability}:
    get:
      summary: Get hero ability by hotkey
      tags:
        - heroes
      responses:
        '200':
          description: Hero object
          schema:
            $ref: '#/definitions/Ability'
    parameters:
      - name: hero
        in: path
        description: Hero name, or short name, or id
        required: true
        type: string
        example: abathur
      - name: ability
        in: path
        description: Ability hotkey
        required: true
        type: string
        example: Q2
  /talents/{talent}:
    get:
      summary: Get talent
      tags:
        - talents
      responses:
        '200':
          description: Talent object
          schema:
            $ref: '#/definitions/Talent'
    parameters:
      - name: talent
        in: path
        description: Talent name or id
        required: true
        type: string
        example: AbathurHeroicAbilityUltimateEvolution
  /maps:
    get:
      summary: Get map list
      tags:
        - maps
      responses:
        '200':
          description: Map list
          schema:
            type: array
            items:
              $ref: '#/definitions/Map'
  /maps/{map}:
    get:
      summary: Get map
      tags:
        - maps
      responses:
        '200':
          description: Map object
          schema:
            $ref: '#/definitions/Map'
    parameters:
      - name: map
        in: path
        description: Map name or id
        required: true
        type: string
        example: Towers of Doom

definitions:
    Replay:
      required:
        - id
        - filename
        - size
        - fingerprint
        - url
      properties:
        id:
          type: integer
          format: int64
        filename:
          type: string
        size:
          type: integer
          format: int64
        game_type:
          type: string
        game_date:
          type: string
          format: date-time
        game_length:
          type: integer
          format: int32
        game_map:
          type: string
        game_version:
          type: string
        region:
          type: integer
          format: int32
        fingerprint:
          type: string
        url:
          type: string
        processed:
          description: Whether the replay was processed by extended parser
          type: boolean
        deleted:
          description: Whether the corresponding replay file was deleted from S3 storage
          type: boolean
        players:
          type: array
          items:
            $ref: '#/definitions/Player'
        teams:
          type: array
          items:
            $ref: '#/definitions/Team'
        bans:
          type: array
          items:
            type: array
            items:
             type: string
    Player:
      required:
        - blizz_id
      properties:
        battletag:
          type: string
        hero:
          type: string
        hero_level:
          type: integer
          format: int32
          minimum: 0
        team:
          type: integer
          format: int32
          minimum: 0
          maximum: 1
        winner:
          type: boolean
        blizz_id:
          type: integer
          format: int64
        silenced:
          type: boolean
        party:
          type: integer
          description: Party number identifier
        talents:
          type: object
          additionalProperties:
            type: string
          example:
             10: MoshPit
        score:
            $ref: '#/definitions/Score'
    Talent:
      properties:
        name:
         type: string
        title:
          type: string
        description:
          type: string
        icon:
          type: string
        icon_url:
          type: object
          additionalProperties:
            type: string
          example:
            66x66: 'http://s3.hotsapi.net/image.png'
        ability:
          type: string
        sort:
          type: integer
        cooldown:
          type: integer
        mana_cost:
          type: integer
        level:
          type: integer
    Ability:
      properties:
        owner:
         type: string
         description: Ability source, one hero (like Abathur) can have several sources
        name:
         type: string
        title:
          type: string
        description:
          type: string
        icon:
          type: string
          description: Internal icon file name
        hotkey:
          type: string
        cooldown:
          type: integer
        mana_cost:
          type: integer
        trait:
          type: boolean
    Hero:
      properties:
        name:
         type: string
        short_name:
          type: string
        attribute_id:
          type: string
          description: 4 letter id corresponding to attribute value in replay file
        translations:
          type: array
          items:
            type: string
        icon_url:
          type: object
          additionalProperties:
            type: string
          example:
            66x66: 'http://s3.hotsapi.net/image.png'
        role:
          type: string
        type:
          type: string
        release_date:
          type: string
          format: date-time
        abilities:
          type: array
          items:
            $ref: '#/definitions/Ability'
        talents:
          type: array
          items:
            $ref: '#/definitions/Talent'
    Map:
      properties:
        name:
          type: string
        translations:
          type: array
          items:
            type: string
    Score:
      properties:
        level:
          type: integer
        kills:
          type: integer
        assists:
          type: integer
        takedowns:
          type: integer
        deaths:
          type: integer
        highest_kill_streak:
          type: integer
        hero_damage:
          type: integer
        siege_damage:
          type: integer
        structure_damage:
          type: integer
        minion_damage:
          type: integer
        creep_damage:
          type: integer
        summon_damage:
          type: integer
        time_cc_enemy_heroes:
          type: integer
        healing:
          type: integer
        self_healing:
          type: integer
        damage_taken:
          type: integer
        experience_contribution:
          type: integer
        town_kills:
          type: integer
        time_spent_dead:
          type: integer
        merc_camp_captures:
          type: integer
        watch_tower_captures:
          type: integer
        meta_experience:
          type: integer
    Team:
      properties:
        winner:
          type: boolean
        team_level:
          type: integer
        structure_xp:
          type: integer
        creep_xp:
          type: integer
        hero_xp:
          type: integer
        minion_xp:
          type: integer
        trickle_xp:
          type: integer
        total_xp:
          type: integer
    UploadResponse:
      required:
        - success
      properties:
        success:
          type: string
        Error:
          type: string
        status:
          type: string
        id:
          type: integer
          format: int64
        file:
          type: string
        url:
          type: string
    PagedReplaysResponse:
      properties:
        page:
          type: integer
        page_count:
          type: integer
        total:
          type: integer
        per_page:
          type: integer
        replays:
          type: array
          items:
            $ref: '#/definitions/Replay'
